= Session 3

== Introduction

Nous reprenons le cours dans un format différent, compte tenu de la conjoncture. 

Aujourd'hui, nous allons faire deux _coding lives_, un concernant la configuration et l'autre - suite à plusieurs suggestions - portant sur la sécurité.

Je vous laisserai des exercices et des lectures pour vous faire la main. A noter qu'un autre quizz aura lieu la semaine prochaine, comptant dans l'évaluation.

Je n'ai pas fixé le format de la dernière séance. J'avais envisagé une animation plutôt interactive et sympathique qui ne peut plus se dérouler dans les conditions actuelles. Je regarde pour une solution alternative.

== Coding live

=== Configuration

==== Etape 0 : Initialisation

.Instanciation

* Initializr : Web
* Maven : org.springframework.boot:spring-boot-starter-web

.Code

* Créer un contrôleur +HelloController+

==== Etape 1 : Injection de paramètre

.Code

* Paramètre simple (@Value)
* Paramètre avec valeur par défaut
* Liste de paramètres
* Dictionnaire de paramètres (${#{$ ...}})
* POJO (@ConfigurationProperties, @Configuration)

==== Etape 2 : Profils Spring

.Personnalisation du profil

* fichier de configuration : application-{profile}.properties
* héritage des profils
* Beans (@Profile)

.Sélection du profil

* propriété : spring.profiles.active
* propriété système Java : -Dspring.profiles.active
* option ligne de commande : --spring.profiles.active

==== Etape 3 : Spring Cloud Config Server

* Initializr : Config Server
* Maven : org.springframework.cloud:spring-cloud-config-server
* Spring Boot Application : @EnableConfigServer
* Propriétés : spring.cloud.config.server.git.uri, server.port (8888)

* Ajouter la configuration dans un dépot git local
* Démarrer le serveur
* Ouvrir l'URL +http://localhost:8888/application/default+
* Vérifier la mise à jour dynamique de la configuration

==== Etape 4 : Spring CLoud Config Client

* Initializr : Config Client
* Maven : org.springframework.cloud:spring-cloud-config-client
* Propriétés : spring.cloud.config.uri (optionnel)

* Tester la récupération de la configuration

=== Sécurité

Un peu de vocabulaire :

* Authentification (_authentication_)
* Autorisation (_authorization_)
* Utilisateur en ligne (_principal_)
* Permission (_granted authority_)
* Rôle (_role_)

=== Etape 0 : initialisation

Créer un projet Web simple

=== Etape 1 : ajout de la sécurité

* Maven dependency : +org.springframework.boot:spring-boot-starter-security+

* Retrouver le compte de connexion
* Vérifier la protection d'accès

==== Etape 2 : Fixer le compte d'accès

* Propriétés : spring.security.user.name, spring.security.user.password

==== Etape 3 : Personnaliser l'authentification

* Classes : WebSecurityConfigurerAdapter, AuthenticationManagerBuilder (inMemoryAuthentication, withUser) , PasswordEncoder
* Annotations : @EnableWebSecurity

==== Etape 4 : Personnaliser les habilitations

* Classes : HttpSecurity (antMatches, hasRole, permitAll, formLogin)

==== Etape 5 : Connexion LDAP

* Initializr : Spring LDAP, LDAP Embedded Server
* Classes : AuthenticationManagerBuilder(ldapAuthentication)

Voir https://spring.io/guides/gs/authenticating-ldap/[Authenticating LDAP]

== Exercices

* https://spring.io/guides/gs/centralized-configuration/[Centralized Configuration]
* https://spring.io/guides/gs/securing-web/[Securing a Web application]

== Un peu de lecture

* https://spring.io/guides/topicals/spring-security-architecture/[Spring Security Architecture]

