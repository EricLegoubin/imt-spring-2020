= Session 1

== Installation de l'environnement de travail

https://chocolatey.org[Chocolatey] va nous aider à installer simplement les composants de notre environnement de travailler (et rapidement en fonction de la bande passante du réseau utilisé). Pour l'installer, suivre la procédure dans ce https://chocolatey.org/install[lien]. 

Vérifier que l'outil est correctement installé en exécutant la commande suivant en ligne de commande, avec _droits d'administrateur_.

[source,]
----
choco -?
----

Installer ensuite un environnement de développement. Dans le cours, nous choisissons https://www.jetbrains.com/idea/[IntelliJ Idea Community].  

[source,]
----
choco install -y intellijidea-community
----

Cet IDE vient avec le JDK (Java Development Kit), version 8. Si ce n'est pas le cas, installer le JDK.

[source,]
----
choco install -y jdk8
----

Nous aurons besoin d'un outil pour tester les requêtes HTTP, https://www.postman.com/[Postman].

[source,]
----
choco install -y postman
----

A un moment dans le cours, nous ferons la démonstration de 
Spring Boot CLI. Pour l'installer (optionnel) :

[source,]
----
choco install -y spring-boot-cli
----

Egalement, nous compilerons l'application directement en ligne de commande. Nous aurons besoin d'avoir Apache Maven installé

[source,]
----
choco install -y maven
----

Voilà, vous êtes prêts pour la suite !

== Démonstration

Rien de mieux pour aborder Spring Framework qu'une démonstration.

=== Hello, world !

Commençons par le traditionnel _Hello, world !_

Cette application affiche quand on tape l'URL +http://localhost:8080+ la fameuse formule.

En termes de code, la structure est la suivante :

image::hello.png[Hello]

Pour initialiser rapidement le projet, nous utilisons le site https://start.spring.io/[Spring Initializr].


[width="100%",options="header"]
|====================
| Paramètre |  Valeur
| Group |  edu.imt.fila1.spring
| Artifact |  hello
| Dependencies | Web  
|====================

Spring ce n'est pas qu'en Java. Il est compatible avec d'autres langages dynamiques comme http://groovy-lang.org[Groovy] ou https://kotlinlang.org/[Kotlin].

Refaisons ce même _Hello, world!_ en Groovy, en utilisant Spring Boot CLI.

=== Un exemple plus complet

Faisons une application plus consistante avec un modèle métier (petit), des API REST et une persistance dans une base de données relationnelle.

image::courses-api.png[Courses API]

Il s'agit de fournir une capacité CRUD aux entités +Course+ et +Topic+.

L'association des URI sur les actions est la suivante pour les entités _Topic_

[width="100%",options="header"]
|====================
| URI | Method | Attendu  
| /topics | GET | Afficher tous les _topics_  
| /topics | PUT | Ajouter un _topic_
| /topics | POST | Modifier un _topic_
| /topics/{id} | GET | Afficher un _topic_ identifié par son _id_
| /topics/{id} | DELETE | Supprimer un _topic_ 
|====================

Les entités _Course_ sont des sous-entités (relation de composition). Les URI associées aux actions sont :

[width="100%",options="header"]
|====================
| URI | Method | Attendu  
| /topics/{topicId}/courses | GET | Afficher tous les _courses_ appartenant à un _topic_  
| /topics/{topicId}/courses | PUT | Ajouter un _course_ dans un _topic_
| /topics/{topicId}/courses | POST | Modifier un _topic_ dans un _topic_
| /topics/{topicId}/courses/{id} | GET | Afficher un _course_ identifié par son _id_
| /topics/{topicId}/courses/{id} | DELETE | Supprimer un _course_ 
|====================

=== API Topic

Commençons par l'API Topic. Créons un nouveau projet.

[width="100%",options="header"]
|====================
| Paramètre |  Valeur
| Group |  edu.imt.fila1.spring
| Artifact |  courses
| Dependencies | Web, JPA, Derby, Actuator  
|====================

Commençons par la partie Web (@RestController, @RequestMapping, @PathVariable).

Déclinons avec le modèle et la couche service (@Autowired)

Ajoutons la couche de persistance (JPA) (@Entity, @Id) et les DAO (Repository)

=== API Course

On commence par dupliquer le package des Topics pour l'adapter.

Il s'agit de gérer la relation Many-to-One (@ManyToOne) et d'affiner les méthodes de recherche.

=== Environnement

Le fichier _application.properties_ permet d'adapter le comportement de l'application.

L'application peut être démarrée seule (standalone).

Spring Boot vient avec un outil de supervision de l'application, Actuator

== Exercices

=== Building a RESTful Web Service

Aller à la page https://spring.io/guides/gs/rest-service/[Building a RESTful Web Service]

=== Accessing Data with JPA

https://spring.io/guides/gs/accessing-data-jpa/[Accessing Data with JPA]

=== Consuming a RESTful Web Service with jQuery

Aller à la page https://spring.io/guides/gs/consuming-rest-jquery/[Consuming a RESTful Web Service with jQuery]


== Lectures

* https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/overview.html#overview[Spring Framework Overview]

* https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans[IoC Container] 1.1 -> 1.4

